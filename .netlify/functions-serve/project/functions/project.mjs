import { createRequire as ___nfyCreateRequire } from "module";
import { fileURLToPath as ___nfyFileURLToPath } from "url";
import { dirname as ___nfyPathDirname } from "path";
let __filename = ___nfyFileURLToPath(import.meta.url);
let __dirname = ___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require = ___nfyCreateRequire(import.meta.url);

// functions/database/connection.js
import { MongoClient, ServerApiVersion } from "mongodb";
var uri = process.env.MONGODB_URI;
if (!uri) {
  throw new Error(uri);
}
var cachedClient = null;
var client = new MongoClient(uri, {
  //serverAPI object uses MongoDB driver configuration to use the Server API for specific MongoDB versions compatibility.
  serverAPI: {
    version: ServerApiVersion.v1,
    // version 1 of the MongoDB Server API for compatibility.
    strict: true,
    //  MongoDB driver throws error for Server API version unsupported methods-features.
    deprecationErrors: true,
    // MongoDB driver throws error for Server API version deprecated methods-features.
  },
});
async function getDatabase() {
  if (cachedClient) {
    return cachedClient.db("projects");
  }
  try {
    await client.connect();
    cachedClient = client;
    console.log("MongoDB connection established successfully");
    return client.db("projects");
  } catch (error) {
    console.error("Failed to connect to MongoDB:", error);
    throw error;
  }
}
var projects_db = await getDatabase();
var connection_default = projects_db;

// functions/project.mjs
import { ObjectId } from "mongodb";
async function handler(event, context) {
  const { httpMethod, path, queryStringParameters, body: body2 } = event;
  const id = path.split("/").pop();
  const headers2 = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type",
  };
  if (httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers: headers2,
    };
  }
  try {
    if (httpMethod === "GET" && path === "/project") {
      return await getProjects();
    }
    if (method === "GET" && path === `/project/${id}`) {
      return await getProject(id);
    }
    if (httpMethod === "POST") {
      return await createProject(body2);
    }
    if (httpMethod === "PATCH") {
      return await updateProject(id, body2);
    }
    if (httpMethod === "DELETE") {
      return await deleteProject(id);
    }
    return {
      statusCode: 405,
      headers: headers2,
      body: `Method ${httpMethod} Not Allowed`,
    };
  } catch (error) {
    console.error("Error:", error);
    return {
      statusCode: 500,
      headers: headers2,
      body: "server error occured",
    };
  }
}
var CreateProject = class {
  constructor(request) {
    const reqbody = request.body;
    this.name = reqbody.name;
    this.category = reqbody.category;
    this.description = reqbody.description;
    this.tech_stack = reqbody.tech_stack;
    this.repository = reqbody.repository;
    this.url = reqbody.url;
    this.image = reqbody.image;
  }
};
async function getProjects() {
  const collection = await connection_default.collection("projects");
  const projects = await collection.find({}).toArray();
  return {
    statusCode: 200,
    headers,
    body: JSON.stringify(projects),
  };
}
async function getProject(project_id) {
  const collection = await connection_default.collection("projects");
  const query = { _id: new ObjectId(project_id) };
  const project = await collection.findOne(query);
  if (!project) {
    return { statusCode: 404, headers, body: "Project not found" };
  }
  return { statusCode: 200, headers, body: JSON.stringify(project) };
}
async function createProject(body2) {
  try {
    const reqbody = JSON.parse(body2);
    const newProject = new CreateProject(reqbody);
    const collection = await db.collection("projects");
    const project = await collection.insertOne(newProject);
    return {
      statusCode: 204,
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify(project),
    };
  } catch (error) {
    console.error("Error adding new project:", error);
    return {
      statusCode: 500,
      // Internal Server Error
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({ message: "Error adding new project" }),
    };
  }
}
async function updateProject(project_id, body2) {
  const collection = await connection_default.collection("projects");
  const reqbody = JSON.parse(body2);
  const query = { _id: new ObjectId(project_id) };
  const newProject = new CreateProject(reqbody);
  const projectUpdates = { $set: newProject };
  const project = await collection.updateOne(query, projectUpdates);
  if (project.matchedCount === 0) {
    return {
      statusCode: 404,
      headers,
      body: `Project with ${project_id} dooesn't exist`,
    };
  }
  return { statusCode: 200, headers, body: JSON.stringify(project) };
}
async function deleteProject(project_id) {
  const collection = await connection_default.collection("projects");
  const reqbody = JSON.parse(body);
  const query = { _id: new ObjectId(project_id) };
  const project = await collection.deleteOne(query);
  if (project.deletedCount === 0) {
    return {
      statusCode: 404,
      headers,
      body: `Project with ${project_id} dooesn't exist`,
    };
  }
  return { statusCode: 200, headers, body: JSON.stringify(project) };
}
var project_default = router;
export { project_default as default, handler };
//# sourceMappingURL=data:application/json;base64,
